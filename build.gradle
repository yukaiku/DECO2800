configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

tasks.withType(JavaExec) {
    if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9099'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'

allprojects {
	group = 'deco2800-2018-thomas'
    version = '0.1'
    ext {
        appName = "deco2800-2018-thomas"
        gdxVersion = '1.9.11'
        roboVMVersion = '2.3.8'
        box2DLightsVersion = '1.4'
        ashleyVersion = '1.7.0'
        aiVersion = '1.8.0'
    }
}

jacoco {
	toolVersion = "0.8.5"

}

test {
	jacoco {
//		append = false
		destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
	}
}

tasks.withType(Javadoc) {
	options.addStringOption('Xdoclint:none', '-quiet')
}

javadoc {
	options.tags = ['require', 'ensure']
}

repositories {
	mavenLocal()
	mavenCentral()
}

dependencies {
	compile group: 'com.google.code.gson', name: 'gson', version:'2.8.6'
	compile group: 'org.javatuples', name: 'javatuples', version: '1.2'

	// Logging via j.u.l using the SLF4J API
	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
	compile group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.30'

	// Unit testing with JUnit
	testImplementation "org.hamcrest:hamcrest:2.2"
	testImplementation 'org.hamcrest:hamcrest-core:2.2'
	testImplementation 'org.hamcrest:hamcrest-library:2.2'
	testImplementation 'junit:junit:4.13'
//	testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
//	testCompile group: 'junit', name: 'junit', version: '4.13', {
//		exclude group: "org.hamcrest", module: "hamcrest-core"
//	}

	// Mocking with Mockito & PowerMock
	testCompile group: 'org.mockito', name: 'mockito-core', version: '3.4.6'
	testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.7'
	testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.7'

	compile "com.badlogicgames.gdx:gdx:$gdxVersion"
	compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
	compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
	compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
	compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"

	compile "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
	compile "com.badlogicgames.gdx:gdx:$gdxVersion"
	compile "org.javatuples:javatuples:1.2"

	compile group: 'com.esotericsoftware', name: 'kryo', version: '4.0.2'
	compile group: 'com.esotericsoftware', name: 'kryonet', version: '2.22.0-RC1'

	testCompile "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
	testCompile "com.badlogicgames.gdx:gdx:$gdxVersion"
	testCompile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"

	compile group: 'org.apache.derby', name: 'derby', version: '10.15.2.0'
}

sourceSets {
	main {
		java {
			srcDir 'src/main/java'
		}
		resources {
			srcDir 'resources'
		}
	}

	test {
		java {
			srcDir 'src/test/java'
		}
		resources {
			srcDir 'resources'
		}
	}
}

test {
	jvmArgs = [
			"-Djava.awt.headless=true",
			"-Dtestfx.robot=glass",
			"-Dtestfx.headless=true",
			"-Dprism.order=sw",
			"-Dprism.text=t2K",
			"-Dglass.platform=Monocle",
			"-Dmonocle.platform=Headless",
			"-Dprism.verbose=true",
			"-Dprism.debugFonts=true"
	]
	/* This tells gradle to log tests to the console as they are running. Note that tests
	   are only executed if there are changes. To force gradle to run all tests, use
	   'gradlew cleanTest test'
	 */
	testLogging {
		events "failed"
		exceptionFormat 'full'
	}
}

task(run, dependsOn: "classes", type: JavaExec) {
    main = "deco2800.thomas.GameLauncher"
    classpath = sourceSets.main.runtimeClasspath
}
